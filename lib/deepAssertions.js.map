{"version":3,"sources":["../src/deepAssertions.js"],"names":[],"mappings":"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","file":"deepAssertions.js","sourcesContent":["import RenderHook from 'react-render-hook';\nimport UnexpectedHtmlLike from 'unexpected-htmllike';\nimport RenderedReactElementAdapter from 'unexpected-htmllike-reactrendered-adapter';\nimport ReactElementAdapter from 'unexpected-htmllike-jsx-adapter';\nimport React from 'react';\nimport TestUtils from 'react-addons-test-utils';\nimport { findDOMNode } from 'react-dom';\n\n// This is a dummy constant object used as a unique identifier for a pending\n// event. This should be a Symbol in ES6, but would mean requiring polyfills\n// for browsers that don't support it.\n// See issue #18\nconst PENDING_DEEP_EVENT_TYPE = { PENDING_DEEP_EVENT: 'Pending deep event' };\n\nfunction checkAttached(expect) {\n    if (!RenderHook.isAttached) {\n        expect.errorMode = 'bubble';\n        expect.fail(output => {\n            return output.error('The global rendering hook is not attached')\n                .nl().text('This probably means React was required before unexpected-react. Check that unexpected-react is required first');\n        });\n    }\n}\n\nfunction getDefaultOptions(flags) {\n    return {\n        diffWrappers: flags.exactly || flags.withAllWrappers,\n        diffExtraChildren: flags.exactly || flags.withAllChildren,\n        diffExtraAttributes: flags.exactly,\n        diffExactClasses: flags.exactly,\n        diffExtraClasses: flags.exactly\n    };\n}\n\nfunction installInto(expect) {\n\n    expect.addAssertion(['<RenderedReactElement> to have [exactly] rendered <ReactElement>',\n        '<RenderedReactElement> to have rendered [with all children] [with all wrappers] <ReactElement>'], function (expect, subject, element) {\n\n        checkAttached(expect);\n\n        const data = RenderHook.findComponent(subject);\n\n        return expect(data, 'to have [exactly] rendered [with all children] [with all wrappers]', element);\n    });\n\n    expect.addAssertion(['<RenderedReactElementData> to have [exactly] rendered <ReactElement>',\n        '<RenderedReactElementData> to have rendered [with all children] [with all wrappers] <ReactElement>'], function (expect, subject, element) {\n\n            checkAttached(expect);\n            var exactly = this.flags.exactly;\n            const renderedReactElementAdapter = new RenderedReactElementAdapter({ convertToString: true, concatTextContent: !exactly });\n\n            const htmlLikeRenderedReactElement = UnexpectedHtmlLike(renderedReactElementAdapter);\n            var withAllChildren = this.flags['with all children'];\n            var withAllWrappers = this.flags['with all wrappers'];\n\n            var jsxAdapter = new ReactElementAdapter({ convertToString: true });\n            if (!exactly) {\n                jsxAdapter.setOptions({ concatTextContent: true });\n            }\n\n            var options = getDefaultOptions({ exactly, withAllWrappers, withAllChildren });\n\n            const diffResult = htmlLikeRenderedReactElement.diff(jsxAdapter, subject, element, expect, options);\n\n            return htmlLikeRenderedReactElement.withResult(diffResult, result => {\n\n                return expect.withError(() => expect(result.weight, 'to equal', 0), () => {\n                    expect.fail({\n                        diff: function (output, diff, inspect) {\n                            return {\n                                diff: htmlLikeRenderedReactElement.render(result, output, diff, inspect)\n                            };\n                        }\n                    });\n                });\n            });\n\n        });\n    \n    \n    expect.addAssertion(['<RenderedReactElement> [not] to contain [exactly] <ReactElement|string>',\n        '<RenderedReactElement> [not] to contain [with all children] [with all wrappers] <ReactElement|string>'], function (expect, subject, element) {\n\n        checkAttached(expect);\n\n        const data = RenderHook.findComponent(subject);\n\n        return expect(data, '[not] to contain [exactly] [with all children] [with all wrappers]', element);\n    });\n\n    expect.addAssertion(['<RenderedReactElementData> [not] to contain [exactly] <ReactElement|string>',\n        '<RenderedReactElementData> [not] to contain [with all children] [with all wrappers] <ReactElement|string>'], function (expect, subject, element) {\n\n        checkAttached(expect);\n\n        var not = this.flags.not;\n        var exactly = this.flags.exactly;\n        var withAllChildren = this.flags['with all children'];\n        var withAllWrappers = this.flags['with all wrappers'];\n\n        const renderedReactElementAdapter = new RenderedReactElementAdapter({ convertToString: true });\n        const htmlLikeRenderedReactElement = UnexpectedHtmlLike(renderedReactElementAdapter);\n        var jsxAdapter = new ReactElementAdapter({ convertToString: true });\n        if (!exactly) {\n            jsxAdapter.setOptions({ concatTextContent: true });\n            renderedReactElementAdapter.setOptions({ concatTextContent: true });\n        }\n\n        var options = getDefaultOptions({ exactly, withAllWrappers, withAllChildren })\n\n        const containsResult = htmlLikeRenderedReactElement.contains(jsxAdapter, subject, element, expect, options);\n\n        return htmlLikeRenderedReactElement.withResult(containsResult, result => {\n            if (not) {\n                if (result.found) {\n                    expect.fail({\n                        diff: function (output, diff, inspect) {\n                            return {\n                                diff: output.error('but found the following match').nl().append(htmlLikeRenderedReactElement.render(result.bestMatch, output.clone(), diff, inspect))\n                            };\n                        }\n                    });\n                }\n                return;\n            }\n\n            if (!result.found) {\n                expect.fail({\n                    diff: function (output, diff, inspect) {\n                        return {\n                            diff: output.error('the best match was').nl().append(htmlLikeRenderedReactElement.render(result.bestMatch, output.clone(), diff, inspect))\n                        };\n                    }\n                });\n            }\n\n        });\n\n    });\n\n    expect.addAssertion(['<RenderedReactElement> queried for [exactly] <ReactElement> <assertion?>',\n        '<RenderedReactElement> queried for [with all children] [with all wrapppers] <ReactElement> <assertion?>'], function (expect, subject, query) {\n\n        checkAttached();\n        const data = RenderHook.findComponent(subject);\n        return expect.apply(expect,\n            [data, 'queried for [exactly] [with all children] [with all wrappers]', query]\n                .concat(Array.prototype.slice.call(arguments, 3)));\n    });\n\n    \n    expect.addAssertion(['<RenderedReactElementData> queried for [exactly] <ReactElement> <assertion?>',\n        '<RenderedReactElementData> queried for [with all children] [with all wrapppers] <ReactElement> <assertion?>'], function (expect, subject, query) {\n\n        var exactly = this.flags.exactly;\n        var withAllChildren = this.flags['with all children'];\n        var withAllWrappers = this.flags['with all wrappers'];\n\n        var adapter = new RenderedReactElementAdapter({ convertToString: true, concatTextContent: !exactly});\n        var renderedHtmlLike = new UnexpectedHtmlLike(adapter);\n        var jsxAdapter = new ReactElementAdapter({ convertToString: true, concatTextContent: !exactly });\n\n        const options = getDefaultOptions({ exactly, withAllWrappers, withAllChildren });\n        options.findTargetAttrib = 'queryTarget';\n\n        const containsResult = renderedHtmlLike.contains(jsxAdapter, subject, query, expect, options);\n        \n        // Work out if we're at the end of the assertion \n        // (need to shift the public instance of the component if we're at the end\n        const isEndOfAssertion = arguments.length === 3;\n\n        return renderedHtmlLike.withResult(containsResult, function (result) {\n\n            if (!result.found) {\n                expect.fail({\n                    diff: (output, diff, inspect) => {\n                        const resultOutput = {\n                            diff: output.error('`queried for` found no match.')\n                        };\n                        if (result.bestMatch) {\n                            resultOutput.diff.error('  The best match was')\n                                .nl()\n                                .append(renderedHtmlLike.render(result.bestMatch, output.clone(), diff, inspect));\n                        }\n                        return resultOutput;\n                    }\n                });\n            }\n            const resultElement = result.bestMatch.target || result.bestMatchItem;\n            if (isEndOfAssertion) {\n                return expect.shift(resultElement.element.getPublicInstance());\n            }\n            return expect.shift(resultElement);\n            \n        });\n    });\n\n\n    expect.addType({\n\n        name: 'ReactPendingDeepEvent',\n\n        base: 'object',\n\n        identify: function (value) {\n            return value && typeof value === 'object' && value.$$typeof === PENDING_DEEP_EVENT_TYPE;\n        }\n\n    });\n\n    expect.addAssertion('<RenderedReactElement> with event <string> <assertion?>', function (expect, subject, eventName) {\n\n        const data = RenderHook.findComponent(subject);\n        return expect.apply(expect,\n            [data, 'with event', eventName]\n                .concat(Array.prototype.slice.call(arguments, 3)));\n    });\n    \n    expect.addAssertion('<RenderedReactElement> with event <string> <object> <assertion?>', function (expect, subject, eventName, args) {\n        \n        const data = RenderHook.findComponent(subject);\n        return expect.apply(expect,\n            [data, 'with event', eventName, args]\n                .concat(Array.prototype.slice.call(arguments, 4)));\n    \n    });\n    \n    expect.addAssertion('<RenderedReactElementData> with event <string> <assertion?>', function (expect, subject, eventName) {\n\n        if (arguments.length > 3) {\n            return expect.shift({\n                $$typeof: PENDING_DEEP_EVENT_TYPE,\n                component: subject,\n                eventName: eventName\n            });\n        } else {\n            // No further arguments, we can trigger the event immediately, and resolve with the component\n            triggerEvent(subject, null, eventName, undefined);\n            return expect.shift(subject.element.getPublicInstance());\n        }\n    });\n    \n    \n    expect.addAssertion('<RenderedReactElementData> with event <string> <object> <assertion?>', function (expect, subject, eventName, args) {\n        if (arguments.length > 4) {\n\n            return expect.shift({\n                $$typeof: PENDING_DEEP_EVENT_TYPE,\n                component: subject,\n                eventName: eventName,\n                eventArgs: args\n            });\n        } else {\n            // No further arguments, we can trigger the event immediately, and resolve with the component\n            triggerEvent(subject, null, eventName, args);\n            return expect.shift(subject.element.getPublicInstance());\n        }\n    });\n    \n\n    expect.addAssertion('<ReactPendingDeepEvent> on [exactly] [with all children] [with all wrappers] <ReactElement> <assertion?>', function (expect, subject, target) {\n        const renderedAdapter = new RenderedReactElementAdapter({ convertToString: true });\n        const jsxAdapter = new ReactElementAdapter({ convertToString: true });\n        const reactHtmlLike = new UnexpectedHtmlLike(renderedAdapter);\n\n        const componentData = subject.component;\n        const exactly = this.flags.exactly;\n        const withAllChildren = this.flags['with all children'];\n        const withAllWrappers = this.flags['with all wrappers'];\n        const options = getDefaultOptions({ exactly, withAllChildren, withAllWrappers });\n        options.findTargetAttrib = 'eventTarget';\n        const containsResult = reactHtmlLike.contains(jsxAdapter, componentData, target, expect, options);\n        \n        return reactHtmlLike.withResult(containsResult, result => {\n            \n            if (!result.found) {\n                return expect.fail({\n\n                    diff: function (output, diff, inspect) {\n                        if (result.bestMatch) {\n                            return {\n                                diff: output\n                                    .error('Could not find the target. The best match was ')\n                                    .append(reactHtmlLike.render(result.bestMatch, output.clone(), diff, inspect))\n                            };\n                        }\n\n                        return {\n                            diff: output.error('Could not find the target.')\n                        };\n                    }\n                })\n            }\n\n            const newSubject = Object.assign({}, subject, {\n                target: result.bestMatch.target || result.bestMatchItem\n            });\n            \n            if (arguments.length > 3) {\n\n                return expect.shift(newSubject);\n            } else {\n                // We're at the end, so trigger the event\n                triggerEvent(newSubject.component, newSubject.target, newSubject.eventName, newSubject.eventArgs);\n                return expect.shift(newSubject.component.element.getPublicInstance());\n            }\n            \n        });\n    });\n\n    function triggerEvent(component, target, eventName, eventArgs) {\n        let targetDOM = findDOMNode(component.element.getPublicInstance());\n        if (target) {\n            targetDOM = findDOMNode(target.element.getPublicInstance());\n        }\n        if (typeof TestUtils.Simulate[eventName] !== 'function') {\n\n            return expect.fail({\n                diff: function (output) {\n                    return output.error('Event ').text(\"'\" + eventName + \"'\").error(' is not supported by TestUtils.Simulate');\n                }\n            });\n        }\n        TestUtils.Simulate[eventName](targetDOM, eventArgs);\n\n    }\n\n    expect.addAssertion('<ReactPendingDeepEvent> [and] with event <string> <assertion?>', function (expect, subject, eventName) {\n\n        triggerEvent(subject.component, subject.target, subject.eventName, subject.eventArgs);\n        if (arguments.length > 3) {\n            return expect.shift({\n                $$typeof: PENDING_DEEP_EVENT_TYPE,\n                component: subject.component,\n                eventName: eventName\n            });\n        } else {\n            triggerEvent(subject.component, null, eventName);\n            return expect.shift(subject.component.element.getPublicInstance());\n        }\n    });\n    \n    expect.addAssertion('<ReactPendingDeepEvent> [and] with event <string> <object> <assertion?>', function (expect, subject, eventName, eventArgs) {\n\n        triggerEvent(subject.component, subject.target, subject.eventName, subject.eventArgs);\n        if (arguments.length > 4) {\n            return expect.shift({\n                $$typeof: PENDING_DEEP_EVENT_TYPE,\n                component: subject.component,\n                eventName: eventName,\n                eventArgs: eventArgs\n            });\n        } else {\n            triggerEvent(subject.component, null, eventName, eventArgs);\n            return expect.shift(subject.component.element.getPublicInstance());\n        }\n    });\n\n    expect.addAssertion(['<ReactPendingDeepEvent> to have [exactly] rendered <ReactElement>',\n        '<ReactPendingDeepEvent> to have rendered [with all children] [with all wrappers]'], function (expect, subject, expected) {\n\n        triggerEvent(subject.component, subject.target, subject.eventName, subject.eventArgs);\n        return expect(subject.component, 'to have [exactly] rendered [with all children] [with all wrappers]', expected);\n    });\n\n    expect.addAssertion(['<ReactPendingDeepEvent> [not] to contain [exactly] <ReactElement>',\n        '<ReactPendingDeepEvent> [not] to contain [with all children] [with all wrappers] <ReactElement>'], function (expect, subject, expected) {\n\n        triggerEvent(subject.component, subject.target, subject.eventName, subject.eventArgs);\n        return expect(subject.component, '[not] to contain [exactly] [with all children] [with all wrappers]', expected);\n    });\n\n    expect.addAssertion(['<ReactPendingDeepEvent> queried for [exactly] <ReactElement> <assertion?>',\n        '<ReactPendingDeepEvent> queried for [with all children] [with all wrappers] <ReactElement> <assertion?>'], function (expect, subject, expected) {\n\n        triggerEvent(subject.component, subject.target, subject.eventName, subject.eventArgs);\n        return expect.apply(expect,\n            [subject.component, 'queried for [exactly] [with all children] [with all wrappers]', expected]\n                .concat(Array.prototype.slice.call(arguments, 3)));\n    });\n\n\n    expect.addAssertion('<ReactModule> to have been injected', function (expect) {\n        checkAttached(expect);\n    });\n}\n\nexport { installInto };\n"]}