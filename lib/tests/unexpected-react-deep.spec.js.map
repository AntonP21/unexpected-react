{"version":3,"sources":["../../src/tests/unexpected-react-deep.spec.js"],"names":[],"mappings":"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","file":"unexpected-react-deep.spec.js","sourcesContent":["/*\n * A note about these tests:\n *\n * These tests are specifically only testing that the correct calls are being made\n  * to unexpected-htmllike, and that the output is correctly returned.\n  * They also test the integration with the unexpected-htmllike-rendered-react-adapter\n  * There are many, many more cases for specific diffing cases in the tests for\n  * `unexpected-htmllike`\n */\n\nconst EmulateDom = require( '../testHelpers/emulateDom');\n\nconst Unexpected = require('unexpected');\nconst UnexpectedReact = require('../unexpected-react');\n\nconst React = require('react');\nconst TestUtils = require('react-addons-test-utils');\nconst { findDOMNode } = require('react-dom');\n\nconst expect = Unexpected.clone()\n    .use(UnexpectedReact);\n\nconst PropTypes = React.PropTypes;\n\nexpect.output.preferredWidth = 80;\n\nclass CustomComp extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            clickCount: 0\n        };\n        this.onClick = this.onClick.bind(this);\n    }\n\n    onClick(event) {\n        event.preventDefault();  // Used to check that we get the event properly\n        this.setState({\n            clickCount: this.state.clickCount + 1\n        });\n    }\n\n    render() {\n        let children = null;\n        if (this.props.childCount) {\n            children = [];\n            for(let i = 1; i <= this.props.childCount; ++i) {\n                children.push(<span key={i} className={'' + i}>{null}{i}</span>);\n            }\n        }\n        // If onClick was passed, add it as a prop, otherwise, leave it undefined\n        const extraProps = {};\n        if (this.props.useEvents) {\n            extraProps.onClick = this.onClick;\n            extraProps['data-click-count'] = this.state.clickCount;\n        }\n\n        return (\n            <div\n                className={this.props.className}\n                {...extraProps}\n            >\n                {children}\n            </div>\n        );\n    }\n}\n\nCustomComp.propTypes = {\n    childCount: PropTypes.number,\n    className: PropTypes.string,\n    useEvents: PropTypes.boolean\n};\n\nclass WrapperComp extends React.Component {\n    render() {\n        return <CustomComp {...this.props} />;\n    }\n}\n\nclass MyDiv extends React.Component {\n    render() {\n        return <div {...this.props}>{this.props.children}</div>;\n    }\n}\n\nMyDiv.propTypes = {\n    children: PropTypes.any\n};\n\n// Dummy assertion for testing async expect.it\nexpect.addAssertion('<string> to eventually have value <string>', (expect, subject, value) => {\n\n    return expect.promise((resolve, reject) => {\n\n        setTimeout(() => {\n            if (subject === value) {\n                resolve();\n            } else {\n                try {\n                    expect.fail('Failed');\n                } catch (e) {\n                    reject(e); // Return the UnexpectedError object\n                }\n            }\n        }, 10);\n    });\n});\n\ndescribe('unexpected-react (deep rendering)', () => {\n\n    beforeEach(() => {\n        UnexpectedReact.clearAll();\n    });\n\n    describe('identify', () => {\n\n        it('identifies a rendered ES6 component', () => {\n\n            const component = TestUtils.renderIntoDocument(<MyDiv className=\"foo\" />);\n            expect(component, 'to be a', 'RenderedReactElement');\n        });\n\n    });\n\n    describe('ReactModule', () => {\n        it('identifies React correctly', () => {\n\n            expect(React, 'to be a', 'ReactModule');\n        });\n\n        it('determines that the global hook has been installed', () => {\n\n            expect(React, 'to have been injected');\n        });\n    });\n\n\n    describe('inspect', () => {\n\n        it('inspects a rendered native element', () => {\n\n            const component = TestUtils.renderIntoDocument(<MyDiv className=\"foo\" />);\n            expect(expect.inspect(component).toString(), 'to equal',\n                '<MyDiv className=\"foo\"><div className=\"foo\" /></MyDiv>');\n        });\n\n        it('inspects a rendered native element with a string child', () => {\n\n            const component = TestUtils.renderIntoDocument(<MyDiv className=\"foo\">content</MyDiv>);\n            expect(expect.inspect(component).toString(), 'to equal',\n                '<MyDiv className=\"foo\"><div className=\"foo\">content</div></MyDiv>');\n        });\n\n        it('inspects a rendered native element with a numeric child', () => {\n\n            const component = TestUtils.renderIntoDocument(<MyDiv className=\"foo\">{42}</MyDiv>);\n            expect(expect.inspect(component).toString(), 'to equal',\n                '<MyDiv className=\"foo\"><div className=\"foo\">42</div></MyDiv>');\n        });\n\n\n\n        it('inspects a rendered element with children', () => {\n\n            const component = TestUtils.renderIntoDocument(<MyDiv className=\"foo\"><span className=\"child1\" /></MyDiv>);\n            expect(expect.inspect(component).toString(), 'to equal',\n                '<MyDiv className=\"foo\"><div className=\"foo\"><span className=\"child1\" /></div></MyDiv>');\n        });\n\n        it('inspects a rendered native element with children and content', () => {\n\n            const component = TestUtils.renderIntoDocument(\n                <MyDiv className=\"foo\">\n                    <span className=\"child1\">child content 1</span>\n                    <span className=\"child2\">child content 2</span>\n                </MyDiv>);\n            expect(expect.inspect(component).toString(), 'to equal',\n                '<MyDiv className=\"foo\">\\n' +\n                '  <div className=\"foo\">\\n' +\n                '    <span className=\"child1\">child content 1</span>\\n' +\n                '    <span className=\"child2\">child content 2</span>\\n' +\n                '  </div>\\n' +\n                '</MyDiv>');\n        });\n\n        it('inspects a rendered custom component', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" />);\n            expect(expect.inspect(component).toString(), 'to equal',\n                '<CustomComp className=\"bar\"><div className=\"bar\" /></CustomComp>');\n        });\n\n        it('inspects a rendered custom component with a child custom component element', () => {\n\n            const component = TestUtils.renderIntoDocument(<WrapperComp className=\"bar\" />);\n            expect(expect.inspect(component).toString(), 'to equal',\n            '<WrapperComp className=\"bar\">\\n' +\n            '  <CustomComp className=\"bar\"><div className=\"bar\" /></CustomComp>\\n' +\n            '</WrapperComp>');\n        });\n\n    });\n\n    describe('to have rendered', () => {\n\n        it('matches a rendered simple component', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" />);\n            return expect(component, 'to have rendered', <CustomComp className=\"bar\"><div className=\"bar\" /></CustomComp>);\n        });\n\n        it('matches a rendered deeper component', () => {\n\n            const component = TestUtils.renderIntoDocument(<WrapperComp className=\"bar\" />);\n            return expect(component, 'to have rendered',\n                <WrapperComp className=\"bar\">\n                    <CustomComp className=\"bar\">\n                        <div className=\"bar\" />\n                    </CustomComp>\n                </WrapperComp>);\n        });\n\n        it('matches an a component with many children', () => {\n\n            const component = TestUtils.renderIntoDocument(<WrapperComp className=\"bar\" childCount={3} />);\n            return expect(component, 'to have rendered',\n                <WrapperComp className=\"bar\" childCount={3}>\n                        <div className=\"bar\">\n                            <span className=\"1\">1</span>\n                            <span className=\"2\">2</span>\n                            <span className=\"3\">3</span>\n                        </div>\n                </WrapperComp>);\n        });\n\n        it('identifies a missing class', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar foo\" />);\n\n            return expect(() => expect(component, 'to have rendered', <CustomComp className=\"blah foo bar\" />),\n                'to error',\n                'expected <CustomComp className=\"bar foo\"><div className=\"bar foo\" /></CustomComp>\\n' +\n                'to have rendered <CustomComp className=\"blah foo bar\" />\\n' +\n                '\\n' +\n                '<CustomComp className=\"bar foo\" // missing class \\'blah\\'\\n' +\n                '>\\n' +\n                '  <div className=\"bar foo\" />\\n' +\n                '</CustomComp>');\n        });\n\n        it('identifies a wrapper', () => {\n            const component = TestUtils.renderIntoDocument(<WrapperComp className=\"bar\" childCount={3} />);\n            return expect(component, 'to have rendered',\n                <WrapperComp className=\"bar\" childCount={3}>\n                        <span className=\"1\">1</span>\n                        <span className=\"2\">2</span>\n                        <span className=\"3\">3</span>\n                </WrapperComp>);\n        });\n\n        it('updates on change', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" useEvents={true} />);\n            TestUtils.Simulate.click(findDOMNode(component));\n\n            return expect(component, 'to have rendered',\n                    <div className=\"bar\" data-click-count={1} />\n            );\n        });\n\n        it('matches an expect.it assertion on a prop', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" />);\n\n            return expect(component, 'to have rendered',\n                <div className={ expect.it('to match', /bar/) } />\n            );\n        });\n\n        it('highlights a difference with an expect.it assertion on a prop', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" />);\n\n            return expect(() => expect(component, 'to have rendered',\n                <div className={ expect.it('to match', /foo/) } />\n            ), 'to throw',\n                'expected <CustomComp className=\"bar\"><div className=\"bar\" /></CustomComp>\\n' +\n                'to have rendered <div className={expect.it(\\'to match\\', /foo/)} />\\n' +\n                '\\n' +\n                '<CustomComp className=\"bar\">\\n' +\n                '  <div className=\"bar\" // expected \\'bar\\' to match /foo/\\n' +\n                '  />\\n' +\n                '</CustomComp>');\n        });\n\n        it('highlights a difference with an expect.it assertion on content', () =>  {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" childCount={1} />);\n            return expect(() => expect(component, 'to have rendered',\n                <div>\n                    <span>{ expect.it('to match', /[a-z]/) }</span>\n                </div>\n                ), 'to error',\n                'expected\\n' +\n                '<CustomComp className=\"bar\" childCount={1}>\\n' +\n                '  <div className=\"bar\"><span className=\"1\">1</span></div>\\n' +\n                '</CustomComp>\\n' +\n                'to have rendered <div><span>{expect.it(\\'to match\\', /[a-z]/)}</span></div>\\n' +\n                '\\n' +\n                '<CustomComp className=\"bar\" childCount={1}>\\n' +\n                '  <div className=\"bar\">\\n' +\n                '    <span className=\"1\">\\n' +\n                \"      1 // expected '1' to match /[a-z]/\\n\" +\n                '    </span>\\n' +\n                '  </div>\\n' +\n                '</CustomComp>');\n        });\n        \n        it('matches an expect.it on JSX content', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" childCount={2} />);\n            return expect(component, 'to have rendered',\n                <CustomComp>\n                    { expect.it('to contain', <span className=\"1\" />)\n                        .and('to contain', <span className=\"2\" />)}\n                </CustomComp>);\n        });\n\n        it('highlights a difference with an async expect.it on an attribute', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" />);\n\n            return expect(expect(component, 'to have rendered',\n                <div className={ expect.it('to eventually have value', 'foo') } />\n            ), 'to be rejected with',\n                'expected <CustomComp className=\"bar\"><div className=\"bar\" /></CustomComp>\\n' +\n                'to have rendered <div className={expect.it(\\'to eventually have value\\', \\'foo\\')} />\\n' +\n                '\\n' +\n                '<CustomComp className=\"bar\">\\n' +\n                '  <div className=\"bar\" // expected \\'bar\\' to eventually have value \\'foo\\'\\n' +\n                '  />\\n' +\n                '</CustomComp>');\n\n        });\n\n        it('matches a component that renders multiple numbers', () => {\n\n            const NumberComponent = React.createClass({\n                render() {\n                    return <div>{3}{6}</div>;\n                }\n            });\n\n            const component = TestUtils.renderIntoDocument(<NumberComponent />);\n            expect(component, 'to have rendered', <div>{3}{6}</div>);\n\n        });\n        \n        it('matches a component that renders single numbers', () => {\n\n            const NumberComponent = React.createClass({\n                render() {\n                    return <div>{3}</div>;\n                }\n            });\n\n            const component = TestUtils.renderIntoDocument(<NumberComponent />);\n            expect(component, 'to have rendered', <div>{3}</div>);\n\n        });\n\n    });\n\n    describe('contains', () => {\n\n        it('finds a deep nested component', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" childCount={3} />);\n            return expect(component, 'to contain',\n               <CustomComp>\n                   <div>\n                       <span>2</span>\n                   </div>\n               </CustomComp>\n            );\n\n        });\n\n        it('throws an error with the best match when the element is not found', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" childCount={3} />);\n            return expect(() => expect(component, 'to contain',\n                <span className=\"foo\">2</span>\n            ), 'to throw',\n                'expected\\n' +\n                '<CustomComp className=\"bar\" childCount={3}>\\n' +\n                '  <div className=\"bar\">\\n' +\n                '    <span className=\"1\">1</span>\\n' +\n                '    <span className=\"2\">2</span>\\n' +\n                '    <span className=\"3\">3</span>\\n' +\n                '  </div>\\n' +\n                '</CustomComp>\\n' +\n                'to contain <span className=\"foo\">2</span>\\n' +\n                '\\n' +\n                'the best match was\\n' +\n                '<span className=\"2\" // missing class \\'foo\\'\\n' +\n                '>\\n' +\n                '  2\\n' +\n                '</span>');\n\n        });\n\n        it('throws an error for `not to contain` with the match when the element is found ', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" childCount={3} />);\n            return expect(() => expect(component, 'not to contain',\n                <span className=\"2\">2</span>\n                ), 'to throw',\n                'expected\\n' +\n                '<CustomComp className=\"bar\" childCount={3}>\\n' +\n                '  <div className=\"bar\">\\n' +\n                '    <span className=\"1\">1</span>\\n' +\n                '    <span className=\"2\">2</span>\\n' +\n                '    <span className=\"3\">3</span>\\n' +\n                '  </div>\\n' +\n                '</CustomComp>\\n' +\n                'not to contain <span className=\"2\">2</span>\\n' +\n                '\\n' +\n                'but found the following match\\n' +\n                '<span className=\"2\">2</span>');\n        });\n\n        it('returns a rejected promise with the best match when the element is not found with an async expect.it', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" childCount={3} />);\n            return expect(expect(component, 'to contain',\n                <span className={expect.it('to eventually have value', 'foo')}>2</span>\n                ), 'to be rejected with',\n                'expected\\n' +\n                '<CustomComp className=\"bar\" childCount={3}>\\n' +\n                '  <div className=\"bar\">\\n' +\n                '    <span className=\"1\">1</span>\\n' +\n                '    <span className=\"2\">2</span>\\n' +\n                '    <span className=\"3\">3</span>\\n' +\n                '  </div>\\n' +\n                '</CustomComp>\\n' +\n                'to contain <span className={expect.it(\\'to eventually have value\\', \\'foo\\')}>2</span>\\n' +\n                '\\n' +\n                'the best match was\\n' +\n                '<span className=\"2\" // expected \\'2\\' to eventually have value \\'foo\\'\\n' +\n                '>\\n' +\n                '  2\\n' +\n                '</span>');\n        });\n\n    });\n\n    describe('queried for', () => {\n\n        it('finds a rendered component', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" childCount={3} />);\n            return expect(component, 'queried for', <span className=\"2\" />, 'to have rendered', <span className=\"2\">2</span>);\n        });\n\n        it('finds a `contains` query', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" childCount={3} />);\n            return expect(component, 'queried for', <div className=\"bar\" />, 'to contain', <span className=\"2\">2</span>);\n        });\n\n        it('errors when the query is not found', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" childCount={3}/>);\n            return expect(() => expect(component, 'queried for', <div className=\"not-exist\"/>, 'to contain',\n                <span className=\"2\">2</span>),\n                'to throw',\n                'expected\\n' +\n                '<CustomComp className=\"bar\" childCount={3}>\\n' +\n                '  <div className=\"bar\">\\n' +\n                '    <span className=\"1\">1</span>\\n' +\n                '    <span className=\"2\">2</span>\\n' +\n                '    <span className=\"3\">3</span>\\n' +\n                '  </div>\\n' +\n                '</CustomComp>\\n' +\n                'queried for <div className=\"not-exist\" /> to contain <span className=\"2\">2</span>\\n' +\n                '\\n' +\n                '`queried for` found no match.  The best match was\\n' +\n                '<div className=\"bar\" // missing class \\'not-exist\\'\\n' +\n                '>\\n' +\n                '  <span className=\"1\">1</span>\\n' +\n                '  <span className=\"2\">2</span>\\n' +\n                '  <span className=\"3\">3</span>\\n' +\n                '</div>')\n        });\n\n        it('errors correctly when the following assertion fails', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" childCount={3} />);\n            return expect(() => expect(component, 'queried for', <span className=\"2\" />, 'to have rendered', <span className=\"2\">foo</span>),\n                'to throw',\n                'expected\\n' +\n                '<CustomComp className=\"bar\" childCount={3}>\\n' +\n                '  <div className=\"bar\">\\n' +\n                '    <span className=\"1\">1</span>\\n' +\n                '    <span className=\"2\">2</span>\\n' +\n                '    <span className=\"3\">3</span>\\n' +\n                '  </div>\\n' +\n                '</CustomComp>\\n' +\n                'queried for <span className=\"2\" /> to have rendered <span className=\"2\">foo</span>\\n' +\n                '\\n' +\n                '<span className=\"2\">\\n' +\n                '  2 // -2\\n' +\n                '    // +foo\\n' +\n                '</span>');\n        });\n\n        it('finds an element with an async expect.it', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" childCount={3} />);\n            return expect(component, 'queried for', <div className={ expect.it('to eventually have value', 'bar')} />, 'to contain', <span className=\"2\">2</span>);\n        });\n        \n        it('passes the located component as the resolution of the promise', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" childCount={3} />);\n            return expect(component, 'queried for', <span className=\"2\" />)\n                .then(span => {\n                    expect(span, 'to be a', HTMLElement);\n                    expect(span, 'to satisfy', { className: '2'});\n                });\n        });\n        \n        it('passes the located component as the resolution of the promise when the query is async', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" childCount={3} />);\n            return expect(component, 'queried for', <span className={ expect.it('to eventually have value', '2')} />)\n                .then(span => {\n                    expect(span, 'to be a', HTMLElement);\n                    expect(span, 'to satisfy', { className: '2' });\n                });\n        });\n        \n        it('uses `queryTarget` as the target element', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" childCount={3} />);\n            return expect(component, 'queried for', <div><span queryTarget className={ expect.it('to eventually have value', '2')} /></div>)\n                .then(span => {\n                    expect(span, 'to be a', HTMLElement);\n                    expect(span, 'to satisfy', { className: '2' });\n                });\n        })\n\n    });\n\n    describe('with events', () => {\n\n        let ClickableComponent;\n\n        beforeEach(() => {\n            ClickableComponent = React.createClass({\n\n                getInitialState() {\n                    return {\n                        clickCount: 1,\n                        itemClickCount: 1\n                    };\n                },\n\n                handleMainClick() {\n                    this.setState({\n                        clickCount: this.state.clickCount + 1\n                    });\n                },\n\n                handleMouseDown(e) {\n                    this.setState({\n                        clickCount: this.state.clickCount + ((e && e.mouseX) || 1)\n                    });\n                },\n\n                handleItemClick() {\n                    this.setState({\n                        itemClickCount: this.state.itemClickCount + 1\n                    });\n                },\n                \n                handleItemMouseDown(e) {\n                    this.setState({\n                        itemClickCount: this.state.itemClickCount + ((e && e.mouseX) || 1)\n                    });\n                },\n\n                render() {\n                    return (\n                        <div onClick={this.handleMainClick} onMouseDown={this.handleMouseDown}>\n                            <span className=\"main-click\">Main clicked {this.state.clickCount}</span>\n                            <span className=\"item-click testfoo testbar\"\n                                  onClick={this.handleItemClick}\n                                  onMouseDown={this.handleItemMouseDown}>Item clicked {this.state.itemClickCount || 0}</span>\n                        </div>\n                    );\n                }\n\n            });\n        });\n        \n        it('renders a zero initially', () => {\n\n            // This test is (was) failing, when the initial click count is 0. Seems to be a bug in the devtools.\n            // Not yet tried updating the devtools.\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n            expect(component, 'to have rendered',\n                <div>\n                    <span className=\"main-click\">Main clicked 1</span>\n                    <span className=\"item-click\">Item clicked 1</span>\n                </div>\n                    \n            );\n        });\n\n        it('calls click on a component using the deep renderer', () => {\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            expect(component, 'with event', 'click', 'to have rendered',\n                <div>\n                    <span className=\"main-click\">Main clicked 2</span>\n                </div>);\n\n        });\n        \n        it('calls click on a sub component using the deep renderer', () => {\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            expect(component, 'with event', 'click', 'on', <span className=\"item-click\" />, 'to have rendered',\n                <div>\n                    <span className=\"item-click\">Item clicked 2</span>\n                </div>);\n\n        });\n\n        it('triggers multiple events', () => {\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            expect(component, 'with event', 'click', 'on', <span className=\"item-click\" />,\n                'with event', 'click', 'on', <span className=\"item-click\" />,\n                'to have rendered',\n                <div>\n                    <span className=\"item-click\">Item clicked 3</span>\n                </div>);\n        });\n        \n        it('triggers multiple events with eventArgs', () => {\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            expect(component, 'with event', 'mouseDown', { mouseX: 2 }, \n                'with event', 'mouseDown', { mouseX: 4 }, \n                'to have rendered',\n                <div>\n                    <span className=\"main-click\">Main clicked 7</span>\n                </div>);\n        });\n\n        it('calls click on a sub component with `to contain`', () => {\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            expect(component, 'with event', 'click', 'on', <span className=\"item-click\" />, \n                'to contain',\n                <span className=\"item-click\">Item clicked 2</span>\n            );\n        });\n        \n        it('calls click on a sub component with `not to contain`', () => {\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            expect(component, 'with event', 'click', 'on', <span className=\"item-click\" />,\n                'not to contain',\n                <span className=\"item-click\">Item clicked 1</span>\n            );\n        });\n\n        it('calls click on a sub component with `not to contain with all children`', () => {\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            expect(component, 'with event', 'click', 'on', <span className=\"item-click\" />,\n                'not to contain with all children',\n                <span className=\"item-click\">Item clicked 1</span>\n            );\n        });\n        \n        it('ignores extra classes by default in the `on` clause', () => {\n\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n            expect(component, 'with event', 'click', 'on', <span className=\"item-click testfoo\" />,\n                'to contain',\n                <span className=\"item-click\">Item clicked 2</span>\n            );\n        });\n\n        it('calls click on a sub component with `queried for`', () => {\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            expect(component, 'with event', 'click', 'on', <span className=\"item-click\" />,\n                'queried for', <span className=\"item-click\" />,\n                'to have rendered',\n                <span className=\"item-click\">Item clicked 2</span>\n            );\n        });\n        \n        it('fails with a helpful error when the event is not known', () => {\n\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            expect(() => expect(component, 'with event', 'foo', 'to have rendered',\n                <div>\n                    <span className=\"main-click\">Main clicked 2</span>\n                </div>), 'to throw', /Event 'foo' is not supported by TestUtils.Simulate/)\n        });\n\n        it('calls events with event parameters', () => {\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            expect(component, 'with event', 'mouseDown', { mouseX: 50 }, 'to have rendered',\n                <div>\n                    <span className=\"main-click\">Main clicked 51</span>\n                </div>);\n        });\n\n        it('fails with a helpful error message when the target cannot be found', () => {\n\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            expect(() => expect(component, 'with event', 'click', 'on', <span className=\"not exists\" />, 'to have rendered',\n                <div>\n                    <span>This is never checked</span>\n                </div>), 'to throw', /Could not find the target. The best match was/);\n        });\n        \n        it('passes the resulting component as the resolution of the promise', () => {\n\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n            \n            return expect(component, 'with event', 'click')\n                .then(result => {\n                    expect(result.state, 'to satisfy', { clickCount: 2 });\n                });\n        });\n\n        it('passes the resulting component as the resolution of the promise with an event argument', () => {\n\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            return expect(component, 'with event', 'mouseDown', { mouseX: 10 })\n                .then(result => {\n                    expect(result.state, 'to satisfy', { clickCount: 11 });\n                });\n        });\n\n        it('passes the resulting component as the resolution of the promise when using `on`', () => {\n\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            return expect(component, 'with event', 'click', 'on', <span className=\"item-click\" />)\n                .then(result => {\n                    expect(result.state, 'to satisfy', { itemClickCount: 2 });\n                });\n        });\n        \n        \n        it('passes the resulting component as the resolution of the promise when using event arguments and `on`', () => {\n\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            return expect(component, 'with event', 'mouseDown', { mouseX: 10 }, 'on', <span className=\"item-click\" />)\n                .then(result => {\n                    expect(result.state, 'to satisfy', { itemClickCount: 11 });\n                });\n        });\n\n        it('passes the resulting component as the resolution of the promise with multiple events', () => {\n\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            return expect(component, 'with event', 'mouseDown', { mouseX: 10 }, 'on', <span className=\"item-click\" />,\n            'and with event', 'click')\n                .then(result => {\n                    expect(result.state, 'to satisfy', { clickCount: 12, itemClickCount: 11 });\n                });\n        });\n        \n        it('passes the resulting component as the resolution of the promise with multiple events and eventArgs', () => {\n\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            return expect(component, 'with event', 'mouseDown', { mouseX: 10 }, 'on', <span className=\"item-click\" />,\n                'and with event', 'mouseDown', { mouseX: 15 })\n                .then(result => {\n                    expect(result.state, 'to satisfy', { clickCount: 26, itemClickCount: 11 });\n                });\n        });\n\n        it('uses the `eventTarget` prop to identify the target for the event', () => {\n\n            const component = TestUtils.renderIntoDocument(<ClickableComponent />);\n\n            return expect(component, 'with event', 'mouseDown', { mouseX: 10 }, 'on', <div ><span className=\"item-click\" eventTarget /></div>)\n                .then(result => {\n                    expect(result.state, 'to satisfy', { clickCount: 11, itemClickCount: 11 });\n                });\n        });\n\n        describe('combined with queried for', () => {\n\n            const TodoItem = React.createClass({\n                getInitialState() {\n                    return {\n                        isCompleted: 'false'\n                    }\n                },\n\n                onClick() {\n                    this.setState({\n                        isCompleted: 'true'\n                    })\n                },\n\n                render() {\n                    return <div>\n                        <span>{this.props.label}</span>\n                        <span>Is complete {this.state.isCompleted}</span>\n                        <button onClick={this.onClick}>Click me</button>\n                    </div>\n                }\n            });\n\n            const TodoList = React.createClass({\n\n                render() {\n                    return <div>\n                        <TodoItem id={1} label=\"one\"/>\n                        <TodoItem id={2} label=\"two\"/>\n                        <TodoItem id={3} label=\"three\"/>\n                    </div>\n                }\n            });\n            \n            it('combines with queried for', () => {\n\n                const component = TestUtils.renderIntoDocument(<TodoList />);\n                expect(component, 'queried for', <TodoItem id={2}/>,\n                    'with event', 'click', 'on', <button />, 'to have rendered',\n                    <div>\n                        <span>two</span>\n                        <span>Is complete true</span>\n                    </div>\n                );\n\n            });\n\n            it('combines with queried for using the result promise', () => {\n\n                const component = TestUtils.renderIntoDocument(<TodoList />);\n                return expect(component, 'queried for', <TodoItem id={2}/>)\n                    .then(todoItem => {\n                        return expect(todoItem, 'with event', 'click', 'on', <button />, 'to have rendered',\n                            <div>\n                                <span>two</span>\n                                <span>Is complete true</span>\n                            </div>\n                        );\n                    });\n            });\n            \n            it('combines with queried for using the result promise and the event promise', () => {\n\n                const component = TestUtils.renderIntoDocument(<TodoList />);\n                return expect(component, 'queried for', <TodoItem id={2}/>)\n                    .then(todoItem => {\n                            return expect(todoItem, 'with event', 'click', 'on', <button />);\n                        })\n                    .then(todoItem => {\n                        return expect(todoItem, 'to have rendered',\n                            <div>\n                                <span>two</span>\n                                <span>Is complete true</span>\n                            </div>\n                        );\n                    });\n            });\n\n            it('with event followed by queried for returns correct element', () => {\n\n                const component = TestUtils.renderIntoDocument(<TodoList />);\n                return expect(component, \n                    'with event click', 'on', <TodoItem id={2}><div><button eventTarget /></div></TodoItem>,\n                    'queried for', <TodoItem id={2} />)\n                    .then(todoItem => {\n                        expect(todoItem.state, 'to satisfy', { isCompleted: 'true' })\n                    });\n            });\n            \n            it('with multiple events followed by queried for returns correct element', () => {\n\n                const component = TestUtils.renderIntoDocument(<TodoList />);\n                return expect(component,\n                    'with event click', 'on', <TodoItem id={2}><div><button eventTarget /></div></TodoItem>,\n                    'with event click', 'on', <TodoItem id={1}><div><button eventTarget /></div></TodoItem>,\n                    'queried for', <TodoItem id={2} />)\n                    .then(todoItem => {\n                        expect(todoItem.state, 'to satisfy', { isCompleted: 'true' })\n                    });\n            });\n            \n            it('with multiple events followed by queried for for a HTML element returns correct element', () => {\n\n                const component = TestUtils.renderIntoDocument(<TodoList />);\n                return expect(component,\n                    'with event', 'click', {},\n                    'with event', 'click', {},\n                    'with event', 'click', {},\n                    'queried for', <TodoItem id={2}><div queryTarget /></TodoItem>)\n                    .then(div => {\n                        expect(div, 'to be a', HTMLElement);\n                        expect(div, 'to satisfy', { tagName: 'DIV' })\n                    });\n            });\n        });\n    });\n});"]}